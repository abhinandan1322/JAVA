public class queue {

    public class Node{
        int data;
        Node next;

        public Node(int data){
            this.data=data;
            this.next=null;
        }
    }

    public class Queue{
        Node front,rear;
        Queue(){
            this.front =null;
            this.rear=null;
        }

        public boolean isEmpty(){
            return front==null && rear==null;
        }

        public void enQueue(int data){
            Node newNode = new Node(data);
            if(rear==null){
                rear=front=newNode;
                return;
            }
            rear.next=newNode;
            rear=newNode;
        }

        public void deQueue(){
            if(isEmpty()){
                System.out.println("Queue undeflow.");
                return;
            }
            Node temp=front;
            front=front.next;

            if(front==null){
                rear=null;
                return;
            }
        }

        public int getFront(){
            if(isEmpty()){
                System.out.println("Queue is empty.");
                return Integer.MIN_VALUE;
            }
            return front.data;
        }

        public int getRear(){
            if (isEmpty()) {
                System.out.println("Queue is empty.");
                return Integer.MIN_VALUE;
            }
            return rear.data;
        }
    }

    public static void main(String[] args) {
        queue.Queue q = new queue().new Queue();
        q.enQueue(10);
        q.enQueue(20);
        System.out.println("The front element is: " + q.getFront());
        System.out.println("The rear element is: " + q.getRear());

        q.deQueue();
        System.out.println("After dequeuing:");
        System.out.println("The front element is: " + q.getFront());
        System.out.println("The front element is: " + q.getRear());
    }
}
