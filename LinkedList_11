class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Solution {

    // Function to find the data of kth node from the end of a Linked List.
    int getKthFromLast(Node head, int k) {
        // Reversing the linked list
        Node prev = null;
        Node currNode = head;
        Node nextNode;

        while (currNode != null) {
            nextNode = currNode.next;
            currNode.next = prev;
            prev = currNode;
            currNode = nextNode;
        }
        head = prev; // Head now points to the new head of the reversed list

        // Finding the k-th node from the start in the reversed list
        int count = 1;
        Node curr = head;

        while (curr != null) {
            if (count == k) {
                return curr.data;
            }
            curr = curr.next;
            count++;
        }

        // If k is greater than the length of the list, return -1
        return -1;
    }

    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        Solution solution = new Solution();
        int k = 2;
        int result = solution.getKthFromLast(head, k);

        if (result != -1) {
            System.out.println("The data of the " + k + "-th node from the end is: " + result);
        } else {
            System.out.println("The list is shorter than " + k + " nodes.");
        }
    }
}
